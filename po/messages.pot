
msgid ""
msgstr ""
"Project-Id-Version: edk2-cix\n"
"POT-Creation-Date: 2024-10-09T14:42:19+08:00\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: docs/SUMMARY.md:1
msgid "Summary"
msgstr ""

#: docs/SUMMARY.md:3 docs/build.md:1
msgid "Build"
msgstr ""

#: docs/SUMMARY.md:4 docs/debug.md:1
msgid "Debug"
msgstr ""

#: docs/build.md:3
msgid "We use docker to maintain a consistent build environment."
msgstr ""

#: docs/build.md:5
msgid ""
"To build all supported EDK2 variants, please run `.github/common/build-deb`."
msgstr ""

#: docs/build.md:7
msgid ""
"Set `BUILD_TARGET` to `DEBUG` in `src/Makefile` to build for debug artifacts."
msgstr ""

#: docs/build.md:9
msgid ""
"Edit `DSC` in `src/Makefile` to reduce amount of variants that will be "
"built. You should also edit `debian/edk2-cix.install` to exclude unbuild "
"variants, otherwise `debuild` will complain that those files are missing."
msgstr ""

#: docs/debug.md:3
msgid "Serial connection"
msgstr ""

#: docs/debug.md:5
msgid "The following UARTs can be used to debug EDK2 on Radxa Orion O6:"
msgstr ""

#: docs/debug.md:7
msgid "UART1: EC"
msgstr ""

#: docs/debug.md:8
msgid "UART2: AP"
msgstr ""

#: docs/debug.md:9
msgid "UART3: Debug"
msgstr ""

#: docs/debug.md:10
msgid "UART4: PM"
msgstr ""

#: docs/debug.md:11
msgid "UART5: SE"
msgstr ""

#: docs/debug.md:13
msgid ""
"UART2 is the default management console for EDK2 and the operationg system."
msgstr ""

#: docs/debug.md:15
msgid "UART3 is only available when EDK2 is build as DEBUG image."
msgstr ""

#: docs/debug.md:17
msgid ""
"All UARTs other than UART1 use 115200 baud. EC UART can be viewed with the "
"following command:"
msgstr ""

#: docs/debug.md:23
msgid "In general, the log output order after power is connected is as follow:"
msgstr ""

#: docs/debug.md:29
msgid "Installation"
msgstr ""

#: docs/debug.md:31
msgid ""
"Once build completes, you can find the complete set of artifacts under "
"`debian/edk2-cix/usr/share/edk2/`."
msgstr ""

#: docs/debug.md:33
msgid ""
"Copy them to a USB disk formatted in FAT file system, and connect them to "
"the target board."
msgstr ""

#: docs/debug.md:35
msgid ""
"You will need to enter UEFI Shell to run the script to update the BIOS. "
"There are 2 ways to achieve that:"
msgstr ""

#: docs/debug.md:37
msgid "Via UEFI Setup"
msgstr ""

#: docs/debug.md:39
msgid ""
"Press `Escape` key when prompted on the console. Then enter `Boot Manager` "
"menu and select `UEFI Shell`."
msgstr ""

#: docs/debug.md:41
msgid "Via `Ventoy`"
msgstr ""

#: docs/debug.md:43
msgid ""
"[`Ventoy`](https://www.ventoy.net/) is a popular ISO multi-boot tool. It "
"also supports booting EFI applications and ARM64 architecture."
msgstr ""

#: docs/debug.md:45
msgid ""
"First, use `Ventoy` to create a bootable USB disk. Make sure you select GPT "
"partition table in the option."
msgstr ""

#: docs/debug.md:47
msgid ""
"You will then reformat the first partition with FAT file system, as the "
"default file system exFAT is not supported by EDK2."
msgstr ""

#: docs/debug.md:49
msgid ""
"You can then copy the EDK2 build artifacts as usual. When you boot the "
"system and missed the `Escape` prmopt, if there is no other bootable media, "
"EDK2 should boot into `Ventoy`."
msgstr ""

#: docs/debug.md:51
msgid ""
"```admonish caution\n"
"If screen is connected, Ventoy will boot into graphical mode. Under this "
"mode you will have no output on UART2, but you can still control the menu "
"with it.\n"
"\n"
"You can enable [`Force Text "
"Mode`](https://github.com/ventoy/Ventoy/issues/2983#issuecomment-2367411817) "
"under the display menu to allow output on UART2.\n"
"```"
msgstr ""

#: docs/debug.md:57
msgid ""
"Inside `Ventoy` UI you should have `Shell.efi` listed as an option if you "
"copied everything from the `debian/edk2-cix.install` folder. Run it to enter "
"UEFI Shell."
msgstr ""

#: docs/debug.md:66
msgid ""
"Once inside the UEFI Shell, you should first be greeted by a list of "
"available storage devices and their physical paths."
msgstr ""

#: docs/debug.md:68
msgid "If you only have the USB disk connected, it should be listed as `fs0`."
msgstr ""

#: docs/debug.md:70
msgid ""
"You can rescan the storage device with `map -r` command, which will reprint "
"the available devices as well."
msgstr ""

#: docs/debug.md:72
msgid ""
"You can run BIOS flash script from UEFI Shell now. It uses Windows "
"convention, so an example command would be:"
msgstr ""

#: docs/debug.md:78
msgid "The first backslash is not mandatory:"
msgstr ""

#: docs/debug.md:84
msgid ""
"There is limited auto completion in the UEFI Shell when pressing `Tab` key."
msgstr ""

#: docs/debug.md:86
msgid ""
"Running this command will flash your BIOS. Follow its prompt to complete the "
"process."
msgstr ""

